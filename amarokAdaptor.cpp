/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp amarokMediaPlayer2.xml -a amarokAdaptor
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "amarokAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class IntrospectableAdaptor
 */

IntrospectableAdaptor::IntrospectableAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

IntrospectableAdaptor::~IntrospectableAdaptor()
{
    // destructor
}

QString IntrospectableAdaptor::Introspect()
{
    // handle method call org.freedesktop.DBus.Introspectable.Introspect
    QString xml_data;
    QMetaObject::invokeMethod(parent(), "Introspect", Q_RETURN_ARG(QString, xml_data));
    return xml_data;
}

/*
 * Implementation of adaptor class PropertiesAdaptor
 */

PropertiesAdaptor::PropertiesAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

PropertiesAdaptor::~PropertiesAdaptor()
{
    // destructor
}

QDBusVariant PropertiesAdaptor::Get(const QString &interface_name, const QString &property_name)
{
    // handle method call org.freedesktop.DBus.Properties.Get
    QDBusVariant value;
    QMetaObject::invokeMethod(parent(), "Get", Q_RETURN_ARG(QDBusVariant, value), Q_ARG(QString, interface_name), Q_ARG(QString, property_name));
    return value;
}

QVariantMap PropertiesAdaptor::GetAll(const QString &interface_name)
{
    // handle method call org.freedesktop.DBus.Properties.GetAll
    QVariantMap values;
    QMetaObject::invokeMethod(parent(), "GetAll", Q_RETURN_ARG(QVariantMap, values), Q_ARG(QString, interface_name));
    return values;
}

void PropertiesAdaptor::Set(const QString &interface_name, const QString &property_name, const QDBusVariant &value)
{
    // handle method call org.freedesktop.DBus.Properties.Set
    QMetaObject::invokeMethod(parent(), "Set", Q_ARG(QString, interface_name), Q_ARG(QString, property_name), Q_ARG(QDBusVariant, value));
}

/*
 * Implementation of adaptor class AppAdaptor
 */

AppAdaptor::AppAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

AppAdaptor::~AppAdaptor()
{
    // destructor
}

void AppAdaptor::LoadThemeFile(const QString &path)
{
    // handle method call org.kde.amarok.App.LoadThemeFile
    QMetaObject::invokeMethod(parent(), "LoadThemeFile", Q_ARG(QString, path));
}

void AppAdaptor::ShowOSD()
{
    // handle method call org.kde.amarok.App.ShowOSD
    QMetaObject::invokeMethod(parent(), "ShowOSD");
}

/*
 * Implementation of adaptor class PlayerAdaptor
 */

PlayerAdaptor2::PlayerAdaptor2(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

PlayerAdaptor2::~PlayerAdaptor2()
{
    // destructor
}

bool PlayerAdaptor2::muted() const
{
    // get the value of property Muted
    return qvariant_cast< bool >(parent()->property("Muted"));
}

void PlayerAdaptor2::setMuted(bool value)
{
    // set the value of property Muted
    parent()->setProperty("Muted", QVariant::fromValue(value));
}

void PlayerAdaptor2::AdjustVolume(double IncreaseBy)
{
    // handle method call org.kde.amarok.Mpris2Extensions.Player.AdjustVolume
    QMetaObject::invokeMethod(parent(), "AdjustVolume", Q_ARG(double, IncreaseBy));
}

void PlayerAdaptor2::StopAfterCurrent()
{
    // handle method call org.kde.amarok.Mpris2Extensions.Player.StopAfterCurrent
    QMetaObject::invokeMethod(parent(), "StopAfterCurrent");
}

/*
 * Implementation of adaptor class MediaPlayer2Adaptor
 */

MediaPlayer2Adaptor::MediaPlayer2Adaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

MediaPlayer2Adaptor::~MediaPlayer2Adaptor()
{
    // destructor
}

bool MediaPlayer2Adaptor::canQuit() const
{
    // get the value of property CanQuit
    return qvariant_cast< bool >(parent()->property("CanQuit"));
}

bool MediaPlayer2Adaptor::canRaise() const
{
    // get the value of property CanRaise
    return qvariant_cast< bool >(parent()->property("CanRaise"));
}

bool MediaPlayer2Adaptor::canSetFullscreen() const
{
    // get the value of property CanSetFullscreen
    return qvariant_cast< bool >(parent()->property("CanSetFullscreen"));
}

QString MediaPlayer2Adaptor::desktopEntry() const
{
    // get the value of property DesktopEntry
    return qvariant_cast< QString >(parent()->property("DesktopEntry"));
}

bool MediaPlayer2Adaptor::fullscreen() const
{
    // get the value of property Fullscreen
    return qvariant_cast< bool >(parent()->property("Fullscreen"));
}

bool MediaPlayer2Adaptor::hasTrackList() const
{
    // get the value of property HasTrackList
    return qvariant_cast< bool >(parent()->property("HasTrackList"));
}

QString MediaPlayer2Adaptor::identity() const
{
    // get the value of property Identity
    return qvariant_cast< QString >(parent()->property("Identity"));
}

QStringList MediaPlayer2Adaptor::supportedMimeTypes() const
{
    // get the value of property SupportedMimeTypes
    return qvariant_cast< QStringList >(parent()->property("SupportedMimeTypes"));
}

QStringList MediaPlayer2Adaptor::supportedUriSchemes() const
{
    // get the value of property SupportedUriSchemes
    return qvariant_cast< QStringList >(parent()->property("SupportedUriSchemes"));
}

void MediaPlayer2Adaptor::Quit()
{
    // handle method call org.mpris.MediaPlayer2.Quit
    QMetaObject::invokeMethod(parent(), "Quit");
}

void MediaPlayer2Adaptor::Raise()
{
    // handle method call org.mpris.MediaPlayer2.Raise
    QMetaObject::invokeMethod(parent(), "Raise");
}

/*
 * Implementation of adaptor class PlayerAdaptor
 */

PlayerAdaptor::PlayerAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

PlayerAdaptor::~PlayerAdaptor()
{
    // destructor
}

bool PlayerAdaptor::canControl() const
{
    // get the value of property CanControl
    return qvariant_cast< bool >(parent()->property("CanControl"));
}

bool PlayerAdaptor::canGoNext() const
{
    // get the value of property CanGoNext
    return qvariant_cast< bool >(parent()->property("CanGoNext"));
}

bool PlayerAdaptor::canGoPrevious() const
{
    // get the value of property CanGoPrevious
    return qvariant_cast< bool >(parent()->property("CanGoPrevious"));
}

bool PlayerAdaptor::canPause() const
{
    // get the value of property CanPause
    return qvariant_cast< bool >(parent()->property("CanPause"));
}

bool PlayerAdaptor::canPlay() const
{
    // get the value of property CanPlay
    return qvariant_cast< bool >(parent()->property("CanPlay"));
}

bool PlayerAdaptor::canSeek() const
{
    // get the value of property CanSeek
    return qvariant_cast< bool >(parent()->property("CanSeek"));
}

QString PlayerAdaptor::loopStatus() const
{
    // get the value of property LoopStatus
    return qvariant_cast< QString >(parent()->property("LoopStatus"));
}

void PlayerAdaptor::setLoopStatus(const QString &value)
{
    // set the value of property LoopStatus
    parent()->setProperty("LoopStatus", QVariant::fromValue(value));
}

double PlayerAdaptor::maximumRate() const
{
    // get the value of property MaximumRate
    return qvariant_cast< double >(parent()->property("MaximumRate"));
}

QVariantMap PlayerAdaptor::metadata() const
{
    // get the value of property Metadata
    return qvariant_cast< QVariantMap >(parent()->property("Metadata"));
}

double PlayerAdaptor::minimumRate() const
{
    // get the value of property MinimumRate
    return qvariant_cast< double >(parent()->property("MinimumRate"));
}

QString PlayerAdaptor::playbackStatus() const
{
    // get the value of property PlaybackStatus
    return qvariant_cast< QString >(parent()->property("PlaybackStatus"));
}

qlonglong PlayerAdaptor::position() const
{
    // get the value of property Position
    return qvariant_cast< qlonglong >(parent()->property("Position"));
}

double PlayerAdaptor::rate() const
{
    // get the value of property Rate
    return qvariant_cast< double >(parent()->property("Rate"));
}

void PlayerAdaptor::setRate(double value)
{
    // set the value of property Rate
    parent()->setProperty("Rate", QVariant::fromValue(value));
}

bool PlayerAdaptor::shuffle() const
{
    // get the value of property Shuffle
    return qvariant_cast< bool >(parent()->property("Shuffle"));
}

void PlayerAdaptor::setShuffle(bool value)
{
    // set the value of property Shuffle
    parent()->setProperty("Shuffle", QVariant::fromValue(value));
}

double PlayerAdaptor::volume() const
{
    // get the value of property Volume
    return qvariant_cast< double >(parent()->property("Volume"));
}

void PlayerAdaptor::setVolume(double value)
{
    // set the value of property Volume
    parent()->setProperty("Volume", QVariant::fromValue(value));
}

void PlayerAdaptor::Next()
{
    // handle method call org.mpris.MediaPlayer2.Player.Next
    QMetaObject::invokeMethod(parent(), "Next");
}

void PlayerAdaptor::OpenUri(const QString &Uri)
{
    // handle method call org.mpris.MediaPlayer2.Player.OpenUri
    QMetaObject::invokeMethod(parent(), "OpenUri", Q_ARG(QString, Uri));
}

void PlayerAdaptor::Pause()
{
    // handle method call org.mpris.MediaPlayer2.Player.Pause
    QMetaObject::invokeMethod(parent(), "Pause");
}

void PlayerAdaptor::Play()
{
    // handle method call org.mpris.MediaPlayer2.Player.Play
    QMetaObject::invokeMethod(parent(), "Play");
}

void PlayerAdaptor::PlayPause()
{
    // handle method call org.mpris.MediaPlayer2.Player.PlayPause
    QMetaObject::invokeMethod(parent(), "PlayPause");
}

void PlayerAdaptor::Previous()
{
    // handle method call org.mpris.MediaPlayer2.Player.Previous
    QMetaObject::invokeMethod(parent(), "Previous");
}

void PlayerAdaptor::Seek(qlonglong Offset)
{
    // handle method call org.mpris.MediaPlayer2.Player.Seek
    QMetaObject::invokeMethod(parent(), "Seek", Q_ARG(qlonglong, Offset));
}

void PlayerAdaptor::SetPosition(const QDBusObjectPath &TrackId, qlonglong Position)
{
    // handle method call org.mpris.MediaPlayer2.Player.SetPosition
    QMetaObject::invokeMethod(parent(), "SetPosition", Q_ARG(QDBusObjectPath, TrackId), Q_ARG(qlonglong, Position));
}

void PlayerAdaptor::Stop()
{
    // handle method call org.mpris.MediaPlayer2.Player.Stop
    QMetaObject::invokeMethod(parent(), "Stop");
}

